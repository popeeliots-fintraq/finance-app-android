name: Android CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-android: # New, Corrected key job for building android
    runs-on: ubuntu-latest
    name: Build Android APK

    steps:
      - uses: actions/checkout@v3
      - name: Generate Gradle Wrapper
        run: gradle wrapper --gradle-version 8.6 --gradle-distribution-sha256-sum 9631d53cf3e74bfa726893aee1f8994fee4e060c401335946dba2156f440f24c
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.6
      
      # The gradle/actions/setup-gradle action handles caching automatically,
      # so we've removed the redundant caching step.
      
      # Now, we will force a clean build to resolve any lingering issues.
      - name: Clean Build
        run: ./gradlew clean --stacktrace --no-daemon

      - name: Build Debug APK with log capture
        run: ./gradlew assembleDebug --stacktrace --debug --no-daemon --info > build-log.txt 2>&1
        
      - name: Find and Upload APK
        if: success()
        run: |
          find app/build/outputs/apk/ -type f -name "*.apk"

      - name: Upload Gradle logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-build-logs
          path: build-log.txt
          
      - name: Debug:List APK files
        run: ls -R app/build/outputs/apk || echo "No APK files found"
        
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: app/build/outputs/**/*.apk

 # ----------------------------------------------------
  # JOB 2: DEPLOY FIREBASE FUNCTIONS (Continuous Deployment)
  # ----------------------------------------------------
  
  deploy-backend:
    name: Deploy Categorization Backend
    # Only run this job if the Android build succeeds
    needs: build-android 
    runs-on: ubuntu-latest

    
    # Crucial: Only deploy the live backend when merging/pushing directly to 'main'
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' 
    env:
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      FIREBASE_PROJECT_ID: ${{ secrets.Firebase_Project_ID }}
      
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20' # Recommended Node.js version for Firebase Functions 
          
      - name: Install Firebase CLI
        run: |
          npm install firebase-tools@latest
          npx firebase --version # âœ… Use npx to avoid global pollution

        
      - name: Write Firebase Service Account
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 }}" | base64 -d > ${{ github.workspace }}/functions/service-account.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=${{ github.workspace }}/functions/service-account.json" >> $GITHUB_ENV
          
      - name: Verify JSON file
        run: |
          head -n 5 ${{ github.workspace }}/functions/service-account.json
          jq .type ${{ github.workspace }}/functions/service-account.json

      - name: Install Function Dependencies
        run: |
          cd functions
          npm install dotenv firebase-functions@latest firebase-admin@latest

      - name: Initialize Firebase Admin (CI)
        run: |
          cd functions
          echo "const admin = require('firebase-admin');" > temp-init.js
          echo "const serviceAccount = require('./service-account.json');" >> temp-init.js
          echo "admin.initializeApp({ credential: admin.credential.cert(serviceAccount) });" >> temp-init.js
          echo "console.log('Firebase admin initialized successfully');" >> temp-init.js
          node temp-init.js

      - name: Deploy Functions
        run: |
          cd functions
          npx firebase deploy --only functions -P $FIREBASE_PROJECT_ID --force
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/functions/service-account.json

      - name: Run Backend Unit Tests
        run: |
          cd functions
          npm test
