name: Android CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-android:
    runs-on: ubuntu-latest
    name: Build Android APK

    steps:
      - uses: actions/checkout@v3

      - name: Generate Gradle Wrapper
        run: gradle wrapper --gradle-version 8.6 --gradle-distribution-sha256-sum 9631d53cf3e74bfa726893aee1f8994fee4e060c401335946dba2156f440f24c

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.6

      - name: Clean Build
        run: ./gradlew clean --stacktrace --no-daemon

      - name: Build Debug APK with log capture
        run: ./gradlew assembleDebug --stacktrace --debug --no-daemon --info > build-log.txt 2>&1

      - name: List APK
        run: ls -R app/build/outputs/apk || echo "No APK files found"

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: app/build/outputs/**/*.apk

  deploy-backend:
    name: Deploy Categorization Backend
    needs: build-android
    runs-on: ubuntu-latest

    env:
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      FIREBASE_PROJECT_ID: ${{ secrets.Firebase_Project_ID }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Firebase CLI
        run: npm install firebase-tools@latest

      - name: Write Firebase Service Account
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 }}" | base64 -d > functions/service-account.json

      - name: Deploy Functions
        run: |
          cd functions
          npx firebase deploy --only functions -P $FIREBASE_PROJECT_ID --force

  deploy-categorizer-service:
    name: Deploy Python Categorizer to Cloud Run
    needs: build-android
    runs-on: ubuntu-latest
    outputs:
      CLOUD_RUN_URL: ${{ steps.get_url.outputs.CLOUD_RUN_URL }}

    env:
      GCP_PROJECT_ID: ${{ secrets.Firebase_Project_ID }}
      SERVICE_NAME: transaction-categorizer
      SERVICE_REGION: us-central1
      BUILD_IMAGE_TAG: gcr.io/${{ secrets.Firebase_Project_ID }}/transaction-categorizer:${{ github.sha }}

    steps:
      - uses: actions/checkout@v4
        with:
          repository: popeeliots-fintraq/finance-app-android
          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

      - name: Authenticate with Service Account Key
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CLOUD_RUN_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Authorize Docker
        run: gcloud auth configure-docker gcr.io

      - name: Build Docker Image
        run: |
          docker build -t $BUILD_IMAGE_TAG -f categorizer/Dockerfile .
          docker push $BUILD_IMAGE_TAG

      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.SERVICE_REGION }}
          image: ${{ env.BUILD_IMAGE_TAG }}
          command: gunicorn -w 1 -b :$PORT categorize_api:app

      - name: Get Cloud Run URL
        id: get_url
        run: |
          echo "CLOUD_RUN_URL=$(gcloud run services describe $SERVICE_NAME --region $SERVICE_REGION --format 'value(status.url)')" >> $GITHUB_OUTPUT

  verify-backend-api:
    name: Verify Backend API is Reachable
    runs-on: ubuntu-latest
    needs: deploy-categorizer-service

    steps:
      - name: Check Cloud Run API Health
        run: |
          URL="${{ needs.deploy-categorizer-service.outputs.CLOUD_RUN_URL }}"
          echo "Testing $URL..."
          curl -I "$URL" || echo "‚ùå API unreachable"
