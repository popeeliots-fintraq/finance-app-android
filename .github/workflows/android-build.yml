name: Android CI



on:

  push:

    branches: [ "main" ]

  pull_request:

    branches: [ "main" ]



jobs:

  build-android: # New, Corrected key job for building android

    runs-on: ubuntu-latest

    name: Build Android APK

    env:

      GRADLE_BUILD_ACTION_CACHE_KEY_PREFIX: v2

      FIN_TRAQ_API_KEY: ${{ secrets.API_KEY }}

    steps:

      - uses: actions/checkout@v3

        with:

          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

          path: .

          

      - name: Generate Gradle Wrapper

        run: gradle wrapper --gradle-version 8.6 --gradle-distribution-sha256-sum 9631d53cf3e74bfa726893aee1f8994fee4e060c401335946dba2156f440f24c

      - name: Grant execute permission for gradlew

        run: chmod +x gradlew



      - name: Set up JDK 17

        uses: actions/setup-java@v4

        with:

          distribution: temurin

          java-version: 17

          cache: gradle



      - name: Set up Gradle

        uses: gradle/actions/setup-gradle@v3

        with:

          gradle-version: 8.6

      

      # The gradle/actions/setup-gradle action handles caching automatically,

      # so we've removed the redundant caching step.

      

      # Now, we will force a clean build to resolve any lingering issues

      - name: Clean Build

        run: ./gradlew clean --stacktrace --no-daemon



      - name: Run Unit Tests (Including API Auth Tests)

        run: ./gradlew testDebugUnitTest --stacktrace --no-daemon



      - name: Build Debug APK with API_BASE_URL

        run: ./gradlew assembleDebug --stacktrace --no-daemon -PapiBaseUrl="${{ secrets.API_BASE_URL }}"



         # NEW STEP: Print the log contents ONLY if the build step failed

      # - name: Print Gradle Log on Failure

       # if: always() # Use always() to run this step even if the previous one failed

        # run: |

         # echo "--- START OF GRADLE BUILD LOG ---"

          # Check if the log file exists and print it

         # if [ -f "build-log.txt" ]; then

        #    cat build-log.txt

        #  else

         #   echo "build-log.txt not found."

        #  fi

        #  echo "--- END OF GRADLE BUILD LOG ---"

                

      - name: Upload Gradle logs (on failure)

        if: failure()

        uses: actions/upload-artifact@v4

        with:

          name: gradle-build-logs

          path: build-log.txt

          

      - name: Debug:List APK files

        run: |

          echo "Listing all APKs in repo:"

          find . -type f -name "*.apk"

        

      - name: Upload APK

        if: success()

        uses: actions/upload-artifact@v4

        with:

          name: app-apk

          path: app/build/outputs/apk/**/*.apk



      - name: Upload APK to GitHub Release

        if: success() && startsWith(github.ref, 'refs/tags/')

        uses: softprops/action-gh-release@v1

        with:

          files: app/build/outputs/apk/**/*.apk

        env:

          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}





 # ----------------------------------------------------

  # JOB 2: DEPLOY FIREBASE FUNCTIONS (Continuous Deployment)

  # ----------------------------------------------------

  

  deploy-backend:

    name: Deploy Categorization Backend

    # Only run this job if the Android build succeeds

    needs: build-android 

    runs-on: ubuntu-latest



    

    # Crucial: Only deploy the live backend when merging/pushing directly to 'main'

    # if: github.event_name == 'push' && github.ref == 'refs/heads/main' 

    env:

      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      FIREBASE_PROJECT_ID: ${{ secrets.Firebase_Project_ID }}

      

    steps:

      - uses: actions/checkout@v3

        with:

          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

          path: .



      - name: Set up Node.js

        uses: actions/setup-node@v3

        with:

          node-version: '20' # Recommended Node.js version for Firebase Functions 

          

      - name: Install Firebase CLI

        run: |

          npm install firebase-tools@latest

          npx firebase --version # ✅ Use npx to avoid global pollution



      # consider removing the following steps for security as per prior advice  

      - name: Write Firebase Service Account

        run: |

          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 }}" | base64 -d > ${{ github.workspace }}/functions/service-account.json

          echo "GOOGLE_APPLICATION_CREDENTIALS=${{ github.workspace }}/functions/service-account.json" >> $GITHUB_ENV

          

      - name: Verify JSON file

        run: |

          head -n 5 ${{ github.workspace }}/functions/service-account.json

          jq .type ${{ github.workspace }}/functions/service-account.json

      - name: Install Function Dependencies

        run: |

          cd functions

          npm install dotenv firebase-functions@latest firebase-admin@latest

      - name: Initialize Firebase Admin (CI)

        run: |

          cd functions

          echo "const admin = require('firebase-admin');" > temp-init.js

          echo "const serviceAccount = require('./service-account.json');" >> temp-init.js

          echo "admin.initializeApp({ credential: admin.credential.cert(serviceAccount) });" >> temp-init.js

          echo "console.log('Firebase admin initialized successfully');" >> temp-init.js

          node temp-init.js

      - name: Deploy Functions

        run: |

          cd functions

          npx firebase deploy --only functions -P $FIREBASE_PROJECT_ID --force

        env:

          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/functions/service-account.json



      - name: Run Backend Unit Tests

        run: |

          cd functions

          npm test -- --passWithNoTests

# ----------------------------------------------------

# JOB 3: DEPLOY PYTHON ML SERVICE TO CLOUD RUN

# ----------------------------------------------------

  deploy-categorizer-service:



    name: Deploy Python Categorizer to Cloud Run

    runs-on: ubuntu-latest

    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

  

    needs: build-android

    outputs:

      CLOUD_RUN_URL: ${{ steps.get_url.outputs.CLOUD_RUN_URL }}

   

 # --- DEFINE ENVIRONMENT VARIABLES ---

    env:

      GCP_PROJECT_ID: ${{ secrets.Firebase_Project_ID }}

      SERVICE_NAME: transaction-categorizer

      SERVICE_REGION: us-central1

      IMAGE_TAG: us-central1-docker.pkg.dev/${{ secrets.Firebase_Project_ID }}/gcf-artifacts/transaction-categorizer:${{ github.sha }}

      MODEL_BUCKET: fintraq-models

      MODEL_OBJECT: model.pkl



    steps:

      - uses: actions/checkout@v3

        with:

          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

          path: .        

          

    # 1. ✅ CORRECTED: AUTHENTICATE USING SERVICE ACCOUNT KEY

      - name: Authenticate with Service Account Key

        uses: google-github-actions/auth@v2

        with:

        # This replaces the entire WIF block and uses the key file secret

          credentials_json: ${{ secrets.GCP_CLOUD_RUN_KEY }} 

        

    # 2. Set up Cloud SDK and Docker Auth

      - name: Set up Cloud SDK and Docker Auth

        uses: google-github-actions/setup-gcloud@v2

        with:

          version: 'latest'

          project_id: ${{ env.GCP_PROJECT_ID }} # This is now correctly configured via the key



      - name: Authorize Docker

        run: gcloud auth configure-docker ${{ env.SERVICE_REGION }}-docker.pkg.dev



      - name: Print all env variables relevant to Docker

        run: printenv | grep IMAGE_TAG



      - name: List workspace root

        run: ls -l



      - name: List categorizer folder

        run: ls -l categorizer

        

      - name: Build Docker Image

        run: |

          docker build -t "$IMAGE_TAG" -f categorizer/Dockerfile . --progress=plain --no-cache

          docker push "$IMAGE_TAG"



      - name: Echo Docker Build Command

        run: echo docker build -t "$IMAGE_TAG" -f categorizer/Dockerfile .



        

    # 4. Deploy the Image to Cloud Run

      - name: Deploy to Cloud Run

        uses: google-github-actions/deploy-cloudrun@v2

        with:

          service: ${{ env.SERVICE_NAME }}

          region: ${{ env.SERVICE_REGION }}

          image: ${{ env.IMAGE_TAG }}

          env_vars: FIREBASE_CONFIG_PATH=/app/service-account-ci.json

          

    # 5. Export the Service URL for subsequent jobs

      - name: Get Cloud Run URL

        id: get_url

        run: |

          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \

          --region ${{ env.SERVICE_REGION }} \

          --project ${{ env.GCP_PROJECT_ID }} \

          --format 'value(status.url)')

          echo "CLOUD_RUN_URL=$SERVICE_URL" >> $GITHUB_OUTPUT

# ----------------------------------------------------

# JOB 4: VERIFY BACKEND API RESPONSE

# ----------------------------------------------------

  verify-backend-api:

    name: Verify Backend API is Reachable

    runs-on: ubuntu-latest

    needs: deploy-categorizer-service



    steps:

      - name: Check Cloud Run API Health

        run: |

          echo "Testing Cloud Run API availability..."

          URL="https://transaction-categorizer-801862457352.us-central1.run.app"

          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL")

          echo "HTTP Response: $STATUS"

          if [ "$STATUS" -eq 200 ]; then

            echo "✅ API is reachable and responding OK"

          else

            echo "❌ API test failed with status: $STATUS"

            exit 1

          fi
