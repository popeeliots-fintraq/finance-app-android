name: Android CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-android:
    runs-on: ubuntu-latest
    name: Build Android APK

    steps:
      - uses: actions/checkout@v3
      - name: Generate Gradle Wrapper
        run: gradle wrapper --gradle-version 8.6 --gradle-distribution-sha256-sum 9631d53cf3e74bfa726893aee1f8994fee4e060c401335946dba2156f440f24c
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.6
      
      # Now, we will force a clean build to resolve any lingering issues
      - name: Clean Build
        run: ./gradlew clean --stacktrace --no-daemon

      - name: Build Debug APK with log capture
        run: ./gradlew assembleDebug --stacktrace --debug --no-daemon --info > build-log.txt 2>&1
        
      - name: Find and Upload APK
        if: success()
        run: |
          find app/build/outputs/apk/ -type f -name "*.apk"

      - name: Upload Gradle logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-build-logs
          path: build-log.txt
          
      - name: Debug:List APK files
        run: ls -R app/build/outputs/apk || echo "No APK files found"
        
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: app/build/outputs/**/*.apk

# ----------------------------------------------------
# JOB 2: DEPLOY FIREBASE FUNCTIONS (Continuous Deployment)
# ----------------------------------------------------
  deploy-backend:
    name: Deploy Categorization Backend
    needs: build-android 
    runs-on: ubuntu-latest
    
    env:
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      FIREBASE_PROJECT_ID: ${{ secrets.Firebase_Project_ID }}
      
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20' 
          
      - name: Install Firebase CLI
        run: |
          npm install firebase-tools@latest
          npx firebase --version 

      - name: Write Firebase Service Account
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 }}" | base64 -d > ${{ github.workspace }}/functions/service-account.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=${{ github.workspace }}/functions/service-account.json" >> $GITHUB_ENV
          
      - name: Verify JSON file
        run: |
          head -n 5 ${{ github.workspace }}/functions/service-account.json
          jq .type ${{ github.workspace }}/functions/service-account.json

      - name: Install Function Dependencies
        run: |
          cd functions
          npm install dotenv firebase-functions@latest firebase-admin@latest

      - name: Initialize Firebase Admin (CI)
        run: |
          cd functions
          echo "const admin = require('firebase-admin');" > temp-init.js
          echo "const serviceAccount = require('./service-account.json');" >> temp-init.js
          echo "admin.initializeApp({ credential: admin.credential.cert(serviceAccount) });" >> temp-init.js
          echo "console.log('Firebase admin initialized successfully');" >> temp-init.js
          node temp-init.js

      - name: Deploy Functions
        run: |
          cd functions
          npx firebase deploy --only functions -P $FIREBASE_PROJECT_ID --force
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/functions/service-account.json

      - name: Run Backend Unit Tests
        run: |
          cd functions
          npm test -- --passWithNoTests

# ----------------------------------------------------
# JOB 3: DEPLOY PYTHON ML SERVICE TO CLOUD RUN
# ----------------------------------------------------
  deploy-categorizer-service:
    name: Deploy Python Categorizer to Cloud Run
    runs-on: ubuntu-latest
    needs: build-android 
    outputs:
      CLOUD_RUN_URL: ${{ steps.get_url.outputs.CLOUD_RUN_URL }}
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    # --- DEFINE ENVIRONMENT VARIABLES ---
    env:
      GCP_PROJECT_ID: ${{ secrets.Firebase_Project_ID }}
      SERVICE_NAME: transaction-categorizer
      SERVICE_REGION: us-central1
      MODEL_BUCKET: fintraq-models
      MODEL_OBJECT: model.pkl
      BUILD_IMAGE_TAG: gcr.io/${{ secrets.Firebase_Project_ID }}/transaction-categorizer:${{ github.sha }}

    steps:
    
    # 1. Checkout the deployment configuration (where the .yml and Dockerfile live)
    - name: Checkout Workflow Repository
      uses: actions/checkout@v4 # Using v4 for better support
      # Checks out the current repository (where the .yml and Dockerfile are) to the root
      
    # 2. Checkout the external repository code into a separate subfolder
    - name: Checkout Source Code Repository
      uses: actions/checkout@v4
      with:
        repository: popeeliots-fintraq/finance-app-android
        token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
        path: . #

    # 3. AUTHENTICATE... (etc. - all the steps below are unchanged)
    - name: Authenticate with Service Account Key
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_CLOUD_RUN_KEY }}  
        
    # 4. Set up Cloud SDK and Docker Auth
    - name: Set up Cloud SDK and Docker Auth
      uses: google-github-actions/setup-gcloud@v2
      with:
        version: 'latest'
        project_id: ${{ env.GCP_PROJECT_ID }}  

    - name: Authorize Docker
      run: gcloud auth configure-docker gcr.io
      
    - name: üîç Debug:Dump Directory Tree to File
      run: |
        echo "===== BEGIN FILE DUMP ====="
        ls -R .
        echo "===== END FILE DUMP ====="
        
    - name: Build Docker Image
      run: |
        docker build -t $BUILD_IMAGE_TAG -f finance-app-android/categorizer/Dockerfile finance-app-android

      
    # 6. Deploy the Image to Cloud Run
    - name: Deploy to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: ${{ env.SERVICE_NAME }}
        region: ${{ env.SERVICE_REGION }}
        image: ${{ env.BUILD_IMAGE_TAG }} # <-- FIX: Uses the correct tag variable
        command: gunicorn -w 1 -b :$PORT categorize_api:app
      
    # 7. Export the Service URL for subsequent jobs
    - name: Get Cloud Run URL
      id: get_url
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region ${{ env.SERVICE_REGION }} \
          --project ${{ env.GCP_PROJECT_ID }} \
          --format 'value(status.url)')
        echo "CLOUD_RUN_URL=$SERVICE_URL" >> $GITHUB_OUTPUT

# ----------------------------------------------------
# JOB 4: VERIFY BACKEND API RESPONSE
# ----------------------------------------------------
  verify-backend-api:
    name: Verify Backend API is Reachable
    runs-on: ubuntu-latest
    needs: deploy-categorizer-service

    steps:
      - name: Check Cloud Run API Health
        run: |
          echo "Testing Cloud Run API availability..."
          URL="https://transaction-categorizer-80" # NOTE: This URL is truncated in the original, should be fixed manually
