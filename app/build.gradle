plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
}

android {
    namespace 'com.example.financeapp'
    compileSdk 34

    defaultConfig {
        applicationId "com.example.financeapp"
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0"

        buildConfigField "String", "DB_PASSPHRASE", "\"c4f7a1b9e2d5f8a0-3b6c7e1d\""
        // ðŸŽ¯ NEW: Logic to load the Gemini API Key from local.properties
        def geminiApiKey = project.properties["geminiApiKey"] ?: ""
        buildConfigField "String", "GEMINI_API_KEY", "\"$geminiApiKey\""
    }

    buildFeatures {
        buildConfig true
    }
    
    buildTypes {
        debug {
            debuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    kapt {
    correctErrorTypes true
 }
}

dependencies {
    // Correct way to manage Kotlin versions across the project.
    implementation(platform('org.jetbrains.kotlin:kotlin-bom:1.9.23'))
    implementation "org.jetbrains.kotlin:kotlin-stdlib"

    // Without this, the GenerativeModel class will not be found.
    // Ensure you are using the correct version from Google's documentation.
    implementation 'com.google.ai.client.generativeai:generativeai:0.8.0' 

    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
    
    // Retrofit & Gson
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    def okhttp_version = "4.12.0"
    implementation("com.squareup.okhttp3:okhttp:$okhttp_version")
    implementation("com.squareup.okhttp3:logging-interceptor:$okhttp_version")
    
    // Room components
    def room_version = "2.6.1"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    
    // SQLCipher for encrypted Room database
    implementation "net.zetetic:android-database-sqlcipher:4.5.4"
    
    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3"

    // Hilt/Dagger setup (Recommended)
    implementation 'com.google.dagger:hilt-android:2.50'
    kapt 'com.google.dagger:hilt-compiler:2.50'

    // Plugins Block (Add this at the top with other plugins)
    id 'com.google.dagger.hilt.android'

    // Lifecycle/ViewModel Scope (REQUIRED for Coroutine use in ViewModel)
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.6.2")

    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.compose.material3:material3:1.2.1' // If using Jetpack

    // WorkManager (Needed for SmsProcessingWorker)
    implementation 'androidx.work:work-runtime-ktx:2.9.0' // Use the latest stable version
    
    // Coroutines extension for Lifecycle/ViewModel (Highly recommended with WorkManager)
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0' // Ensure this version is recent

}
